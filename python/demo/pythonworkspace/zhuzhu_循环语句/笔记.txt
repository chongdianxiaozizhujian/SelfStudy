Python中的循环语句有 for 和 while。

while 判断条件：
    语句

同样需要注意冒号和缩进。另外，在Python中没有do..while循环。
无限循环在服务器上客户端的实时请求非常有用。
--------------------------------------------------
while 循环使用 else 语句
在 while … else 在条件语句为 false 时执行 else 的语句块


简单语句组
类似if语句的语法，如果你的while循环体中只有一条语句，可以将该语句与while写在同一行中
--------------------------------------------------
for 语句
Python for循环可以遍历任何序列的项目，如一个列表或者一个字符串。

for循环的一般格式如下：

for <variable> in <sequence>:
    <statements>
else:
    <statements>


--------------------------------------------------
结合range()和len()函数以遍历一个序列的索引
list = [1,2,3,4]
for x in range(len(list)):
    print(x,list[x])
--------------------------------------------------
break和continue语句及循环中的else子句
break 语句可以跳出 for 和 while 的循环体。如果你从 for 或 while 循环中终止，任何对应的循环 else 块将不执行

continue语句被用来告诉Python跳过当前循环块中的剩余语句，然后继续进行下一轮循环

pass 语句
Python pass是空语句，是为了保持程序结构的完整性。
pass 不做任何事情，一般用做占位语句
最小的类:
class A:
    pass

--------------------------------------------------------------
使用内置 enumerate 函数进行遍历:
for index, item in enumerate(sequence):
    process(index, item)
--------------------------------------------------------------
sum(range(101))  1~100的和

--------------------------------------------------------------
while 循环语句和 for 循环语句使用 else 的区别：
1、如果 else 语句和 while 循环语句一起使用，则当条件变为 False 时，则执行 else 语句。
2.如果 else 语句和 for 循环语句一起使用，else 语句块只在 for 循环正常终止时执行！
--------------------------------------------------------------
关于pass的作用：

pass只是为了防止语法错误。

if a>1:
    pass #如果没有内容，可以先写pass，但是如果不写pass，就会语法错误
pass就是一条空语句。在代码段中或定义函数的时候，如果没有内容，或者先不做任何处理，直接跳过，就可以使用pass。
--------------------------------------------------------------
