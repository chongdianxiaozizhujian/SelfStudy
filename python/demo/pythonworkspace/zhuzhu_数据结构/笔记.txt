列表
list.append(x)	把一个元素添加到列表的结尾，相当于 a[len(a):] = [x]。
list.extend(L)	通过添加指定列表的所有元素来扩充列表，相当于 a[len(a):] = L。
list.insert(i, x)	在指定位置插入一个元素。第一个参数是准备插入到其前面的那个元素的索引，例如 a.insert(0, x) 会插入到整个列表之前，而 a.insert(len(a), x) 相当于 a.append(x) 。
list.remove(x)	删除列表中值为 x 的第一个元素。如果没有这样的元素，就会返回一个错误。
list.pop([i])	从列表的指定位置删除元素，并将其返回。如果没有指定索引，a.pop()返回最后一个元素。元素随即从列表中被删除。（方法中 i 两边的方括号表示这个参数是可选的，而不是要求你输入一对方括号，你会经常在 Python 库参考手册中遇到这样的标记。）
list.clear()	移除列表中的所有项，等于del a[:]。
list.index(x)	返回列表中第一个值为 x 的元素的索引。如果没有匹配的元素就会返回一个错误。
list.count(x)	返回 x 在列表中出现的次数。
list.sort()	对列表中的元素进行排序。
list.reverse()	倒排列表中的元素。
list.copy()	返回列表的浅复制，等于a[:]。
----------------------------------------------------------
将列表当做堆栈使用
列表方法使得列表可以很方便的作为一个堆栈来使用，堆栈作为特定的数据结构，
最先进入的元素最后一个被释放（后进先出）。用 append() 方法可以把一个元
素添加到堆栈顶。用不指定索引的 pop() 方法可以把一个元素从堆栈顶释放出来。

----------------------------------------------------------
将列表当作队列使用
也可以把列表当做队列用，只是在队列里第一加入的元素，第一个取出来；但是拿
列表用作这样的目的效率不高。在列表的最后添加或者弹出元素速度快，然而在列
表里插入或者从头部弹出速度却不快（因为所有其他的元素都得一个一个地移动）
popleft()

----------------------------------------------------------
列表推导式
列表推导式提供了从序列创建列表的简单途径。通常应用程序将一些操作应用于某个
序列的每个元素，用其获得的结果作为生成新列表的元素，或者根据确定的判定条件创建子序列。

每个列表推导式都在 for 之后跟一个表达式，然后有零到多个 for 或 if 子句。
返回结果是一个根据表达从其后的 for 和 if 上下文环境中生成出来的列表。如果希望表达式推导出一个元组，就必须使用括号。
例如:
vec = [2, 4, 6]
[3*x for x in vec]
-----
[[x, x**2] for x in vec]
-----
if 子句作为过滤器
[3*x for x in vec if x > 3]
-----
vec1 = [2, 4, 6]
vec2 = [4, 3, -9]
[x*y for x in vec1 for y in vec2]
[x+y for x in vec1 for y in vec2]
[vec1[i]*vec2[i] for i in range(len(vec1))]
------------------------------------------------
嵌套列表解析

matrix = [
    [1,2,3,4],
    [1,2,3,4],
    [1,2,3,4],
]
(1)
[[row[i] for row in matrix] for i in range(4)]
(2)
transposed = []
for i in range(4):
    transposed.append([row[i] for row in matrix])
(3)
transposed = []
for i in range(4):
    transposed_row = []
    for row in matrix:
        transposed_row.append(row[i])
    transposed.append(transposed_row)
-------------------------------------------------------------
del 语句
使用 del 语句可以从一个列表中依索引而不是值来删除一个元素。这与使用 pop() 返回一个值不同。可以用 del 语句从列表中删除一个切割，或清空整个列表
-------------------------------------------------------------
元组和序列
元组由若干逗号分隔的值组成
-------------------------------------------------------------
集合
集合是一个无序不重复元素的集。基本功能包括关系测试和消除重复元素。

可以用大括号({})创建集合。注意：如果要创建一个空集合，你必须用 set() 而不是 {} ；后者创建一个空的字典
-------------------------------------------------------------
字典
序列是以连续的整数为索引，与此不同的是，字典以关键字为索引，关键字可以是任意不可变类型，通常用字符串或数值。

理解字典的最佳方式是把它看做无序的键=>值对集合。在同一个字典之内，关键字必须是互不相同。

一对大括号创建一个空的字典：{}。


构造函数 dict() 直接从键值对元组列表中构建字典。
dict([('sape', 4139), ('guido', 4127), ('jack', 4098)])

使用关键字参数指定键值对
dict(sape=4139, guido=4127, jack=4098)
-----------------------------------------------------------------------
遍历
在字典中遍历时，关键字和对应的值可以使用 items() 方法同时解读出来
knights = {'gallahad': 'the pure', 'robin': 'the brave'}
for k, v in knights.items():
    print(k, v)

-------------------
序列中遍历时，索引位置和对应值可以使用 enumerate() 函数同时得到
for i, v in enumerate(['tic', 'tac', 'toe']):
    print(i, v)

-------------------
同时遍历两个或更多的序列，可以使用 zip() 组合
questions = ['1+1=','2+2=','3+3=']
answers = [2,4,6]
for q, a in zip(questions,answers):
    print('{0}{1}.'.format(q,a))

-------------------
反向遍历一个序列，首先指定这个序列，然后调用 reversed() 函数
for i in reversed(range(1, 10, 2)):
    print(i)
-------------------
按顺序遍历一个序列，使用 sorted() 函数返回一个已排序的序列，并不修改原值
先去重，后排序
basket = ['apple', 'orange', 'apple', 'pear', 'orange', 'banana']
for f in sorted(set(basket)):
    print(f)
-------------------
拓展:
列表推导式的执行顺序：各语句之间是嵌套关系，左边第二个语句是最外层，依次往右进一层，左边第一条语句是最后一层。
如:
[x*y for x in range(1,5) if x > 2 for y in range(1,4) if y < 3]
执行顺序为:
for x in range(1,5)
    if x > 2
        for y in range(1,4)
            if y < 3
                x*y
-------------------
m = [
    [1,2,3,4],
    [1,2,3,4],
    [1,2,3,4]
]
n = [row[i] for i in range(4) for row in m]
print(n)

不用()来改变嵌套的层次关系而用 []，因为
python 解析器会把 (row[i] for row in m)
解析为一个 生成器 generator。
例如:
(i for i in range(4))
<generator object <genexpr> at 0x???????>

[i for i in range(4)]
[0, 1, 2, 3]

a = (i for i in range(4))
next(a)
next(a)
next(a)
next(a)