Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。

在 Python 中，变量就是变量，它没有类型，我们所说的"类型"是变量所指的内存中对象的类型。

等号（=）用来给变量赋值。

等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。
--------------------------------------------------------------
多个变量赋值
Python允许你同时为多个变量赋值
a=b=c=1

可以为多个对象指定多个变量
a,b,c=1,2,'a'
-------------------------------------------------------------
标准数据类型
Python3 中有六个标准的数据类型：

Number（数字）
String（字符串）
List（列表）
Tuple（元组）
Sets（集合）
Dictionary（字典）


Number（数字）
Python3 支持 int、float、bool、complex（复数）。

在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。

像大多数语言一样，数值类型的赋值和计算都是很直观的。

内置的 type() 函数可以用来查询变量所指的对象类型。
isinstance() 函数也可

区别就是:
type()不会认为子类是一种父类类型。
isinstance()会认为子类是一种父类类型。

当你指定一个值时，Number 对象就会被创建
您也可以使用del语句删除一些对象引用
del str1,str2

------------------------------------------------
数值运算
a/b  除法,结果为浮点数
a//b 除法,结果为整数
% 取余
** 乘方

数值类型实例
int	float	complex
10	0.0	3.14j
100	15.20	45.j
-786	-21.9	9.322e-36j
080	32.3e+18	.876j
-0490	-90.	-.6545+0J
-0x260	-32.54e100	3e+26J
0x69	70.2E-12	4.53e-7j
Python还支持复数，复数由实数部分和虚数部分构成，可以用a + bj,或者complex(a,b)表示， 复数的实部a和虚部b都是浮点型
--------------------------------------------------------------------------------------------

字符串
Python中的字符串用单引号(')或双引号(")括起来，同时使用反斜杠(\)转义特殊字符。
字符串的截取的语法格式如下：
变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。
加号 (+) 是字符串的连接符， 星号 (*) 表示复制当前字符串，紧跟的数字为复制的次数。
另外，反斜杠(\)可以作为续行符，表示下一行是上一行的延续。也可以使用 """...""" 或者 '''...''' 跨越多行。
注意，Python 没有单独的字符类型，一个字符就是长度为1的字符串。
注意,与 C 字符串不同的是，Python 字符串不能被改变。向一个索引位置赋值，比如word[0] = 'm'会导致错误。
--------------------------------------------------------------------------------------------
List（列表） 是 Python 中使用最频繁的数据类型。

列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。

列表是写在方括号([])之间、用逗号分隔开的元素列表。

和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。

列表截取的语法格式如下：

变量[头下标:尾下标]
索引值以 0 为开始值，-1 为从末尾的开始位置。

加号（+）是列表连接运算符，星号（*）是重复操作。
---------------------------------------------------------------------------
Tuple（元组）
元组（tuple）与列表类似，不同之处在于元组的元素不能修改。元组写在小括号(())里，元素之间用逗号隔开。

元组中的元素类型也可以不相同

字符串可以看作一种特殊的元组

虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表
构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则

tup1 = ()    # 空元组
tup2 = (20,) # 一个元素，需要在元素后添加逗号
注意 string、list和tuple都属于sequence（序列）。
----------------------------------------------------------
Set（集合）
集合（set）是一个无序不重复元素的序列。

基本功能是进行成员关系测试和删除重复元素。

可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
创建格式：
parame = {value01,value02,...}
或者
set(value)
set('1223232')
set(1,2,,2,2,3) -->此种设置方式错误

a = set('abracadabra')
b = set('alacazam')
print(a)
print(b)
print(a - b)  # a和b的差集
print(a | b)  # a和b的并集
print(a & b)  # a和b的交集
print(a ^ b)  # a和b中不同时存在的元素
注意 输出结果是随机的,无序的,去重的
-----------------------------------------------
Dictionary（字典）
字典（dictionary）是Python中另一个非常有用的内置数据类型。

列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。

字典是一种映射类型，字典用"{ }"标识，它是一个无序的键(key) : 值(value)对集合。

键(key)必须使用不可变类型。

在同一个字典中，键(key)必须是唯一的。

创建字典的方式
tinydict = {'name':'runoob','code':1, 'site': 'www.runoob.com'}
dict([('Runoob', 1), ('Google', 2), ('Taobao', 3)])
dict(Runoob=1, Google=2, Taobao=3)
注意：

1、字典是一种映射类型，它的元素是键值对。
2、字典的关键字必须为不可变类型，且不能重复。
3、创建空字典使用 { }。
------------------------------------------------------------------
元组（小拓展）
一般来说，函数的返回值一般为一个。

而函数返回多个值的时候，是以元组的方式返回的。

示例（命令行下）：

>>>def example(a,b):
...     return (a,b)
...
>>>type(example(3,4))
<class 'tuple'>
>>>
python中的函数还可以接收可变长参数，比如以 "*" 开头的的参数名，会将所有的参数收集到一个元组上。

例如：

def test(*args):
    print(args)
    return args

print(type(test(1,2,3,4)))    #可以看见其函数的返回值是一个元组


python中的字典是使用了一个称为散列表（hashtable）的算法
其特点就是：不管字典中有多少项，in操作符花费的时间都差不多。
如果把一个字典对象作为for的迭代对象，那么这个操作将会遍历字典的键：
def example(d):
    # d 是一个字典对象
    for c in d:
        print(c)
        #如果调用函数试试的话，会发现函数会将d的所有键打印出来;
        #也就是遍历的是d的键，而不是值.
想要输出 kye:value的组合
for c in dict:
    print(c,':',dict[c])

    或者
for c in dict:
    print(c,end=':');
    print(dict[c])
以下这种方法可能会有问题
for c in dict:
    print(c+':');
    print(dict[c])
    因为 key不一定是 string类型

------------------------------------------------------------------
python 与 C 语言和 Java 语言的一点不同，表现在它的变量不需要声明变量类型，这是因为像 C 语言和 Java 语言来说，它们是静态的，而 python 是动态的，变量的类型由赋予它的值来决定，例如：

a=1
a=1.001
a='python'
print(a)

第一次为变量 a 赋值为整型，第二次赋值是浮点数，第三次是一个字符串，最后输出时只保留了最后一次的赋值。

------------------------------------------------------------------------
type 是用于求一个未知数据类型对象，而 isinstance 是用于判断一个对象是否是已知类型。

type 不认为子类是父类的一种类型，而isinstance会认为子类是父类的一种类型。

可以用 isinstance 判断子类对象是否继承于父类，type 不行。

综合以上几点，type 与 isinstance 虽然都与数据类型相关，但两者其实用法不同，type 主要用于判断未知数据类型，isinstance 主要用于判断 A 类是否继承于 B 类：

# 判断子类对象是否继承于父类
class father(object):
    pass
class son(father):
    pass
if __name__ == '__main__':
    print (type(son())==father)
    print (isinstance(son(),father))
    print (type(son()))
    print (type(son))
    运行结果
    False
    True
    <class '__main__.son'>
    <type 'type'>
---------------------------------------------------------------------
输入 dict 的键值对，可直接用 items() 函数：

dict1 = {'abc':1,"cde":2,"d":4,"c":567,"d":"key1"}
for k,v in dict1.items():
    print(k,":",v)

创建字典的几种方法:
dict([('a',1),('b',2),('c',3)]) #元素为元组的列表
dict({('a',1),('b',2),('c',3)})#元素为元组的集合
dict([['a',1],['b',2],['c',3]])#元素为列表的列表
dict((('a',1),('b',2),('c',3)))#元素为元组的元组
注意:dict((('a',1),))#元素为元组的元组(成功)
dict((('a',1)))#元素为元组的元组(失败)
---------------------------------------------------------------------
集合和字典的异同:
无序：集合是无序的，所以不支持索引；字典同样也是无序的，但由于其元素是由键（key）和值（value）两个属性组成的键值对，可以通过键（key）来进行索引
元素唯一性：集合是无重复元素的序列，会自动去除重复元素；字典因为其key唯一性，所以也不会出现相同元素
--------------------------------------------------------------------------------------------
复数:
复数是由一个实数和一个虚数组合构成，表示为：x+yj
一个复数时一对有序浮点数(x,y)，其中x是实数部分，y是虚数部分。
 1、虚数不能单独存在，它们总是和一个值为0.0的实数部分一起构成一个复数
 2、复数由实数部分和虚数部分构成
 3、表示虚数的语法：real+imagej
 4、实数部分和虚数部分都是浮点数
 5、虚数部分必须有后缀j或J

 class Complex(object):
    def __init__(self,rel=15,img=15j):
        self.realPart = rel
        self.imagPart = img
    def creatComplex(self):
        return self.realPart + self.imagPart
    def getImg(self):
        img = str(self.imagPart)
        img = img[:-1];
        return  float(img)

def test():
    com = Complex()
    Cplex = com.creatComplex()
    if Cplex.imag == com.getImg():
        print(com.getImg())
    else:
        pass
    if Cplex.real == com.realPart:
        print(com.realPart)
    else:
        pass
    print(Cplex)
    print(Cplex.conjugate())
if __name__=="__main__":
    test()





